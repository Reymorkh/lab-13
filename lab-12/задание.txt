{
двунаправленный список
1.	Сформировать двунаправленный список, в информационное поле записать объекты из иерархии классов лабораторной работы №10.
2.	Распечатать полученный список.
3.	Выполнить обработку списка в соответствии с заданием.
4.	Распечатать полученный список.
5.	Выполнить глубокое клонирование списка, т.е. под объекты, хранящиеся в коллекции, должна быть выделена память.
6.	Удалить список из памяти.

вариант
•	Добавить в список элемент с заданным номером.
•	Удалить из списка элемент с заданным информационным полем (например, с заданным именем).
}

Тесты:
1. Покрытие узла списка по строкам 33,3%, по ветвям: 0%.
2. Покрытие по строкам в списке 84,8%, по ветвям 74%.
3. Хорошо бы в тестах отразить добавление в начало и в конец по номеру.
4. И удаление по инф. полю из начала и конца списка.

Вопросы по реализованным методам.

+ !!! коллекция должна быть обобщённой!!!

Исправления предоставлены проверку 25.04.2024 16:22, на предыдущей паре отсутствовали, а на паре в этот день нужно уже сдавать 2 часть (минус 1 балл)




{
бинарное дерево
1.	Сформировать идеально сбалансированное бинарное дерево, в информационное поле записать объекты из иерархии классов лабораторной работы №10.
2.	Распечатать полученное дерево. Дерево должно быть напечатано по уровням.
3.	Выполнить обработку дерева в соответствии с заданием, вывести полученный результат.
4.	Преобразовать идеально сбалансированное дерево в дерево поиска . При этом под объекты нового дерева выделяется отдельная память. 
5.	Распечатать полученное дерево, т.е. должна быть возможность просмотра и исходного дерева и преобразованного. Дерево должно быть напечатано по уровням.
6.	Удалить из дерева поиска элемент с заданным ключом (не обязательно).
7.	Удалить дерево из памяти.

Найти количество элементов с заданным ключом (информационное поле ссылается на объект, который является ключом).
}


{
Хэш-таблица
1.	Создать хеш-таблицу и заполнить ее элементами.
2.	Выполнить поиск элемента в хеш-таблице
3.	Удалить найденный элемент из хеш-таблицы.
4.	Выполнить поиск элемента в хеш-таблице
5.	Показать, что будет при добавлении элемента в хеш-таблицу, если в таблице уже находится максимальное число элементов (для метода открытой адресации, для метода цепочек просто показать добавление в таблицу).

Открытая адресация, поиск и удаление по ключу
}


{
колекция на выбор
Двунаправленный список (6 баллов)
Двунаправленный кольцевой список (6 баллов)
Стек на базе однонаправленного списка (7 баллов)
Стек на базе двунаправленного списка (7 баллов)
Очередь на базе однонаправленного списка (7 баллов)
Очередь на базе двунаправленного списка (7 баллов)
Хеш-таблица (открытая адресация) (8 баллов)
Хеш-таблица (метод цепочек) (8 баллов)
Дерево поиска (8 баллов)
Дерево поиска + идеально сбалансированное дерево (9 баллов)
Дерево поиска + ИСД + хранение пар элементов <TKey, TValue> (10 баллов)
}